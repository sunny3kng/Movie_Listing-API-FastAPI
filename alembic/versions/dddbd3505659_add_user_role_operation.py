"""add user role operation

Revision ID: dddbd3505659
Revises: e2140716ee05
Create Date: 2024-08-08 23:11:07.522426

"""
from alembic import op
import bcrypt
import sqlalchemy as sa

from config import config
from database import SessionLocal
from libs.utils import generate_id
from models import OperationModel, RoleModel, RoleOperationModel, UserModel, UserRoleModel
from routers.admin.v1.crud.operations import get_operation, get_operation_by_name, get_operation_by_slug

db = SessionLocal()

def _create_password(password):
    password = bytes(password, "utf-8")
    password = bcrypt.hashpw(password, config["salt"])
    password = password.decode("utf-8")
    return password

operations = [
    {
        "name": "movies",
        "index": "0",
        "sub_operations": [
            {
                "name": "add movies",
                "index": "0"
            },
            {
                "name": "view movies",
                "index": "1"
            },
            {
                "name": "list movies",
                "index": "2"
            },
            {
                "name": "update movies",
                "index": "3"
            },
            {
                "name": "delete movies",
                "index": "4"
            },
        ]
    },
    {
        "name": "comments",
        "index": "1",
        "sub_operations": [
            {
                "name": "add comments",
                "index": "0"
            },
            {
                "name": "view comments",
                "index": "1"
            },
            {
                "name": "list comments",
                "index": "2"
            },
            {
                "name": "update comments",
                "index": "3"
            },
            {
                "name": "delete comments",
                "index": "4"
            },
        ]
    },
    {
        "name": "ratings",
        "index": "2",
        "sub_operations": [
            {
                "name": "add ratings",
                "index": "0"
            },
            {
                "name": "view ratings",
                "index": "1"
            },
            {
                "name": "list ratings",
                "index": "2"
            },
            {
                "name": "update ratings",
                "index": "3"
            },
            {
                "name": "delete ratings",
                "index": "4"
            },
        ]
    },
    {
        "name": "Settings",
        "index": "3",
        "sub_operations": [
            {
                "name": "List Users",
                "index": "0",
            },
            {
                "name": "Add User",
                "index": "1",
            },
            {
                "name": "Update User",
                "index": "2",
            },
            {
                "name": "Delete User",
                "index": "3",
            },
            {
                "name": "List Roles",
                "index": "4",
            },
            {
                "name": "Add Role",
                "index": "5",
            },
            {
                "name": "Update Role",
                "index": "6",
            },
            {
                "name": "Delete Role",
                "index": "7",
            },
            {
                "name": "Reset Password",
                "index": "8",
            },
        ],
    }
]

users = {
    "first_name": "Super",
    "last_name": "Admin",
    "email": "ronakmotka2002@gmail.com",
    "password": "123456",
}

roles = {
    "slug": "Super Admin",
    "name": "Super Admin",
}


basic_user = {
    "name": "normal user",
    "operations": ["view movies", "list movies", "add comments", "view comments", "list comments", "update comments", "delete comments",
        "add ratings", "view ratings", "list ratings", "update ratings", "delete ratings",
    ]
}


# revision identifiers, used by Alembic.
revision = 'dddbd3505659'
down_revision = 'e2140716ee05'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    for operation in operations:
        operaion_id = generate_id()
        db_operation = OperationModel(
            id=operaion_id,
            slug=operation["name"],
            name=operation["name"],
            order_index=operation["index"],
        )
        db.add(db_operation)
        for sub_operation in operation["sub_operations"]:
            sub_operation_id = generate_id()
            db_sub_operation = OperationModel(
                id=sub_operation_id,
                slug=sub_operation["name"],
                name=sub_operation["name"],
                order_index=sub_operation["index"],
                parent_id=operaion_id,
            )
            db.add(db_sub_operation)
        
    user_id = generate_id()
    db_user = UserModel(
        id=user_id,
        first_name=users.get("first_name"),
        last_name=users.get("last_name"),
        email=users.get("email"),
        password=_create_password(users.get("password")),
    )
    db.add(db_user)

    role_id = generate_id()
    db_role = RoleModel(
        id=role_id,
        slug=roles.get("slug"),
        name=roles.get("name"),
        editable=False,
    )
    db.add(db_role)

    user_role_id = generate_id()
    db_user_role = UserRoleModel(
        id=user_role_id,
        user_id=user_id,
        role_id=role_id,
    )
    db.add(db_user_role)
    db.commit()

    role_id = generate_id()
    db_role = RoleModel(
        id=role_id,
        slug=basic_user.get("name"),
        name=basic_user.get("name"),
        editable=False,
    )
    db.add(db_role)
    for operation in basic_user.get("operations"):
        db_operation = get_operation_by_name(db, name=operation)
        id = generate_id()
        db_role_operation = RoleOperationModel(
            id=id, role_id=role_id, operation_id=db_operation.id
        )
        db.add(db_role_operation)

    db.commit()
    db.close()
    return


def downgrade():
    db.query(UserRoleModel).delete()
    db.query(RoleModel).delete()
    db.query(UserModel).delete()
    db.query(OperationModel).delete()
